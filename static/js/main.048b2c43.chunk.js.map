{"version":3,"sources":["components/Greetings/index.js","components/Header/index.js","components/ProfilePhoto/index.js","components/Footer/index.js","components/SocialMedia/index.js","App.js","serviceWorker.js","index.js"],"names":["greeting","Header","id","ProfilePhoto","src","currentTime","Date","getHours","customStyle","color","Greetings","className","style","currentDate","getFullYear","Footer","Social","App","SocialMedia","Boolean","window","location","hostname","match","rootElement","document","getElementById","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"ySAWIA,E,gCCNWC,G,KAFA,kBAAM,4BAAQC,GAAG,eAAX,SCMNC,G,KALM,kBAEjB,yBAAKD,GAAG,gBAAgBE,IAAI,oFFD1BC,G,OAAc,IAAIC,MAAOC,YAEzBC,EAAc,CAChBC,MAAO,IAKPJ,EAAc,IACdL,EAAW,UACXQ,EAAYC,MAAQ,UACbJ,EAAc,IACrBL,EAAW,YACXQ,EAAYC,MAAQ,QAGpBT,EAAW,UACXQ,EAAYC,MAAQ,SAoBTC,MAff,WACI,OACI,yBAAKC,UAAU,aAEX,6BACA,wBAAIC,MAAOJ,GAAX,QAA8BR,EAA9B,KACA,oCA9BC,WA8BD,IA7BI,GA6BJ,6CACA,6BAEA,uGGjCNa,G,OAAc,IAAIP,MAAOQ,eAUhBC,EARA,kBAEX,4BAAQb,GAAG,UACP,6BACA,6BACA,wCAAcW,K,MCIPG,MAXf,WACI,OACI,yBAAKL,UAAU,UAEX,6BAFJ,6B,MCkBOM,MAdf,WACE,OACE,yBAAKN,UAAU,OAEb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAACO,EAAD,MACA,kBAAC,EAAD,QCLcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZN,IAAMC,EAAcC,SAASC,eAAe,QAE5CC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJL,GDuHE,kBAAmBM,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.048b2c43.chunk.js","sourcesContent":["import React from 'react';\nimport \"./styles.css\";\n\nconst name = \"Jonathan\"\nconst surname = \"\"\nconst currentTime = new Date().getHours();\n\nconst customStyle = {\n    color: \"\"\n}\n\nlet greeting;\n\nif (currentTime < 12) {\n    greeting = \"morning\"\n    customStyle.color = \"orange\"\n} else if (currentTime < 18) {\n    greeting = \"afternoon\"\n    customStyle.color = \"red\"\n\n} else {\n    greeting = \"evening\"\n    customStyle.color = \"green\"\n\n}\n\n\nfunction Greetings() {\n    return (\n        <div className=\"greetings\">\n\n            <br></br>\n            <h3 style={customStyle}>Good {greeting}.</h3>\n            <h3>I am {name} {surname} and I am glad to have you browsing here.</h3>\n            <br>\n            </br>\n            <h3>This webpage is underconstruction and it is turning to an React app .</h3>\n\n        </div>\n    );\n}\n\nexport default Greetings;\n","import React from 'react';\nimport \"./styles.css\";\n\nconst Header = () => <header id=\"main-header\">...</header>;\n\nexport default Header;","import React from 'react';\nimport \"./styles.css\";\nconst api = \"https://api.github.com/users/\";\n\nconst ProfilePhoto = () =>\n\n    <img id=\"profile-photo\" src=\"https://pbs.twimg.com/profile_images/1117762563431755776/ep36gMms_400x400.jpg\">\n    </img>;\n\nexport default ProfilePhoto;\n","import React from 'react';\nimport \"./styles.css\";\n\nconst currentDate = new Date().getFullYear();\n\nconst Footer = () =>\n\n    <footer id=\"footer\">\n        <hr></hr>\n        <br></br>\n        <p>Copyright {currentDate}</p>\n    </footer>;\n\nexport default Footer;","import React from 'react';\nimport \"./styles.css\";\n\nfunction Social() {\n    return (\n        <div className=\"social\">\n\n            <br></br>\n\n            Social Media links here.\n        </div>\n    );\n}\n\nexport default Social;\n\n\n","import React from 'react';\nimport Header from './components/Header';\nimport ProfilePhoto from './components/ProfilePhoto';\nimport Greetings from './components/Greetings';\nimport Footer from './components/Footer';\nimport SocialMedia from './components/SocialMedia';\n\nimport \"./styles.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n\n      <Header />\n      <ProfilePhoto />\n      <Greetings />\n      <SocialMedia />\n      <Footer />\n\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nconst rootElement = document.getElementById(\"root\");\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    rootElement);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}